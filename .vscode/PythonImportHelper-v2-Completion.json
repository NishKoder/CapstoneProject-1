[
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "toml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "toml",
        "description": "toml",
        "detail": "toml",
        "documentation": {}
    },
    {
        "label": "mock_open",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "MagicMock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "parse_requirements",
        "importPath": "utils.parse",
        "description": "utils.parse",
        "isExtraImport": true,
        "detail": "utils.parse",
        "documentation": {}
    },
    {
        "label": "parse_requirements",
        "importPath": "utils.parse",
        "description": "utils.parse",
        "isExtraImport": true,
        "detail": "utils.parse",
        "documentation": {}
    },
    {
        "label": "update_dependencies",
        "importPath": "generate_pyproject",
        "description": "generate_pyproject",
        "isExtraImport": true,
        "detail": "generate_pyproject",
        "documentation": {}
    },
    {
        "label": "update_optional_dependencies",
        "importPath": "generate_pyproject",
        "description": "generate_pyproject",
        "isExtraImport": true,
        "detail": "generate_pyproject",
        "documentation": {}
    },
    {
        "label": "write_toml_file",
        "importPath": "generate_pyproject",
        "description": "generate_pyproject",
        "isExtraImport": true,
        "detail": "generate_pyproject",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "generate_pyproject",
        "description": "generate_pyproject",
        "isExtraImport": true,
        "detail": "generate_pyproject",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "certifi",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "certifi",
        "description": "certifi",
        "detail": "certifi",
        "documentation": {}
    },
    {
        "label": "MongoDBClient",
        "importPath": "utils.db_connectors",
        "description": "utils.db_connectors",
        "isExtraImport": true,
        "detail": "utils.db_connectors",
        "documentation": {}
    },
    {
        "label": "MongoDBConnectionError",
        "importPath": "utils.db_connectors",
        "description": "utils.db_connectors",
        "isExtraImport": true,
        "detail": "utils.db_connectors",
        "documentation": {}
    },
    {
        "label": "MongoDBOperationError",
        "importPath": "utils.db_connectors",
        "description": "utils.db_connectors",
        "isExtraImport": true,
        "detail": "utils.db_connectors",
        "documentation": {}
    },
    {
        "label": "pymongo",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pymongo",
        "description": "pymongo",
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NoReturn",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "pymongo.collection",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pymongo.collection",
        "description": "pymongo.collection",
        "detail": "pymongo.collection",
        "documentation": {}
    },
    {
        "label": "pymongo.cursor",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pymongo.cursor",
        "description": "pymongo.cursor",
        "detail": "pymongo.cursor",
        "documentation": {}
    },
    {
        "label": "pymongo.database",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pymongo.database",
        "description": "pymongo.database",
        "detail": "pymongo.database",
        "documentation": {}
    },
    {
        "label": "pymongo.results",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pymongo.results",
        "description": "pymongo.results",
        "detail": "pymongo.results",
        "documentation": {}
    },
    {
        "label": "AdvancedExceptionHandler",
        "importPath": "utils.exceptions",
        "description": "utils.exceptions",
        "isExtraImport": true,
        "detail": "utils.exceptions",
        "documentation": {}
    },
    {
        "label": "SimpleJson",
        "importPath": "utils.types",
        "description": "utils.types",
        "isExtraImport": true,
        "detail": "utils.types",
        "documentation": {}
    },
    {
        "label": "UnionDT",
        "importPath": "utils.types",
        "description": "utils.types",
        "isExtraImport": true,
        "detail": "utils.types",
        "documentation": {}
    },
    {
        "label": "SimpleJson",
        "importPath": "utils.types",
        "description": "utils.types",
        "isExtraImport": true,
        "detail": "utils.types",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "DEFAULT_LOG_FORMAT",
        "importPath": "utils.constants",
        "description": "utils.constants",
        "isExtraImport": true,
        "detail": "utils.constants",
        "documentation": {}
    },
    {
        "label": "DEFAULT_DATE_FORMAT",
        "importPath": "utils.constants",
        "description": "utils.constants",
        "isExtraImport": true,
        "detail": "utils.constants",
        "documentation": {}
    },
    {
        "label": "MAX_LOG_FILE_SIZE",
        "importPath": "utils.constants",
        "description": "utils.constants",
        "isExtraImport": true,
        "detail": "utils.constants",
        "documentation": {}
    },
    {
        "label": "BACKUP_LOG_COUNT",
        "importPath": "utils.constants",
        "description": "utils.constants",
        "isExtraImport": true,
        "detail": "utils.constants",
        "documentation": {}
    },
    {
        "label": "DEFAULT_LOG_FORMAT",
        "importPath": "utils.constants",
        "description": "utils.constants",
        "isExtraImport": true,
        "detail": "utils.constants",
        "documentation": {}
    },
    {
        "label": "DEFAULT_LOG_DIR",
        "importPath": "utils.constants",
        "description": "utils.constants",
        "isExtraImport": true,
        "detail": "utils.constants",
        "documentation": {}
    },
    {
        "label": "DEFAULT_DATE_FORMAT",
        "importPath": "utils.constants",
        "description": "utils.constants",
        "isExtraImport": true,
        "detail": "utils.constants",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "logging.handlers",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging.handlers",
        "description": "logging.handlers",
        "detail": "logging.handlers",
        "documentation": {}
    },
    {
        "label": "SimpleJson",
        "importPath": "MLSharedUtils.types",
        "description": "MLSharedUtils.types",
        "isExtraImport": true,
        "detail": "MLSharedUtils.types",
        "documentation": {}
    },
    {
        "label": "parse_requirements",
        "importPath": "MLSharedUtils.parse",
        "description": "MLSharedUtils.parse",
        "isExtraImport": true,
        "detail": "MLSharedUtils.parse",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"CapstoneProject-1\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"CapstoneProject-1\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"CapstoneProject-1\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"CapstoneProject-1\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"CapstoneProject-1\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "test_parse_requirements_valid_file",
        "kind": 2,
        "importPath": "Tests.common.test_generate_pyproject",
        "description": "Tests.common.test_generate_pyproject",
        "peekOfCode": "def test_parse_requirements_valid_file() -> None:\n    \"\"\"Test parsing a valid requirements file.\"\"\"\n    requirements_content = (\n        \"requests>=2.28.0\\n\"\n        \"numpy==1.23.0\\n\"\n        \"# This is a comment\\n\"\n        \"pandas~=1.5.0\\n\"\n    )\n    with patch(\n        \"builtins.open\", mock_open(read_data=requirements_content)",
        "detail": "Tests.common.test_generate_pyproject",
        "documentation": {}
    },
    {
        "label": "test_parse_requirements_empty_file",
        "kind": 2,
        "importPath": "Tests.common.test_generate_pyproject",
        "description": "Tests.common.test_generate_pyproject",
        "peekOfCode": "def test_parse_requirements_empty_file() -> None:\n    \"\"\"Test parsing an empty requirements file.\"\"\"\n    with patch(\"builtins.open\", mock_open(read_data=\"\")) as mock_file:\n        dependencies = parse_requirements(\"empty.txt\")\n        mock_file.assert_called_once_with(\n            \"empty.txt\", 'r', encoding=\"utf-8\"\n        )\n        assert dependencies == []\ndef test_parse_requirements_with_comments() -> None:\n    \"\"\"Test parsing a requirements file with comments and blank lines.\"\"\"",
        "detail": "Tests.common.test_generate_pyproject",
        "documentation": {}
    },
    {
        "label": "test_parse_requirements_with_comments",
        "kind": 2,
        "importPath": "Tests.common.test_generate_pyproject",
        "description": "Tests.common.test_generate_pyproject",
        "peekOfCode": "def test_parse_requirements_with_comments() -> None:\n    \"\"\"Test parsing a requirements file with comments and blank lines.\"\"\"\n    requirements_content = \"# Comment\\n\\nrequests==2.28.0\\n\"\n    with patch(\n        \"builtins.open\",\n        mock_open(read_data=requirements_content)\n    ) as mock_file:\n        dependencies = parse_requirements(\"requirements.txt\")\n        mock_file.assert_called_once_with(\n            \"requirements.txt\", 'r', encoding=\"utf-8\"",
        "detail": "Tests.common.test_generate_pyproject",
        "documentation": {}
    },
    {
        "label": "test_update_dependencies",
        "kind": 2,
        "importPath": "Tests.common.test_generate_pyproject",
        "description": "Tests.common.test_generate_pyproject",
        "peekOfCode": "def test_update_dependencies() -> None:\n    \"\"\"Test updating dependencies in the TOML config.\"\"\"\n    config = {\"project\": {\"dependencies\": []}}\n    dependencies = [\"requests>=2.28.0\", \"numpy==1.23.0\"]\n    update_dependencies(config, dependencies)\n    assert config[\"project\"][\"dependencies\"] == dependencies\ndef test_update_optional_dependencies() -> None:\n    \"\"\"Test updating optional dependencies in the TOML config.\"\"\"\n    config = {\"project\": {\"optional-dependencies\": {\"dev\": []}}}\n    dev_dependencies = [\"pytest>=7.0\", \"flake8\"]",
        "detail": "Tests.common.test_generate_pyproject",
        "documentation": {}
    },
    {
        "label": "test_update_optional_dependencies",
        "kind": 2,
        "importPath": "Tests.common.test_generate_pyproject",
        "description": "Tests.common.test_generate_pyproject",
        "peekOfCode": "def test_update_optional_dependencies() -> None:\n    \"\"\"Test updating optional dependencies in the TOML config.\"\"\"\n    config = {\"project\": {\"optional-dependencies\": {\"dev\": []}}}\n    dev_dependencies = [\"pytest>=7.0\", \"flake8\"]\n    update_optional_dependencies(config, dev_dependencies)\n    assert config[\"project\"][\"optional-dependencies\"][\"dev\"] == dev_dependencies\ndef test_write_toml_file(tmp_path) -> None:\n    \"\"\"Test writing the TOML config to a file.\"\"\"\n    config = {\"project\": {\"name\": \"my-project\", \"version\": \"0.1.0\"}}\n    filepath = tmp_path / \"pyproject.toml\"",
        "detail": "Tests.common.test_generate_pyproject",
        "documentation": {}
    },
    {
        "label": "test_write_toml_file",
        "kind": 2,
        "importPath": "Tests.common.test_generate_pyproject",
        "description": "Tests.common.test_generate_pyproject",
        "peekOfCode": "def test_write_toml_file(tmp_path) -> None:\n    \"\"\"Test writing the TOML config to a file.\"\"\"\n    config = {\"project\": {\"name\": \"my-project\", \"version\": \"0.1.0\"}}\n    filepath = tmp_path / \"pyproject.toml\"\n    write_toml_file(str(filepath), config)\n    with open(filepath, \"r\") as f:\n        content = toml.load(f)\n    assert content == config\n@patch(\"generate_pyproject.parse_requirements\")\n@patch(\"generate_pyproject.update_dependencies\")",
        "detail": "Tests.common.test_generate_pyproject",
        "documentation": {}
    },
    {
        "label": "test_main_functionality",
        "kind": 2,
        "importPath": "Tests.common.test_generate_pyproject",
        "description": "Tests.common.test_generate_pyproject",
        "peekOfCode": "def test_main_functionality(\n    mock_file,\n    mock_write_toml,\n    mock_update_optional_deps,\n    mock_update_deps,\n    mock_parse_reqs\n):\n    \"\"\"Test the main function's behavior.\"\"\"\n    mock_parse_reqs.side_effect = [[\"dep1\"], [\"dev-dep1\"]]\n    main()",
        "detail": "Tests.common.test_generate_pyproject",
        "documentation": {}
    },
    {
        "label": "TestMongoDBClient",
        "kind": 6,
        "importPath": "utils.Tests.test_db_connectors",
        "description": "utils.Tests.test_db_connectors",
        "peekOfCode": "class TestMongoDBClient(unittest.TestCase):\n    \"\"\"\n    Test suite for the MongoDBClient class.\n    \"\"\"\n    @patch(\"pymongo.MongoClient\")\n    def setUp(self, mock_mongo_client: MagicMock):\n        \"\"\"\n        Sets up a test instance of MongoDBClient with a mocked MongoClient.\n        \"\"\"\n        self.mock_mongo_client = mock_mongo_client",
        "detail": "utils.Tests.test_db_connectors",
        "documentation": {}
    },
    {
        "label": "ca",
        "kind": 5,
        "importPath": "utils.Tests.test_db_connectors",
        "description": "utils.Tests.test_db_connectors",
        "peekOfCode": "ca = certifi.where()\nclass TestMongoDBClient(unittest.TestCase):\n    \"\"\"\n    Test suite for the MongoDBClient class.\n    \"\"\"\n    @patch(\"pymongo.MongoClient\")\n    def setUp(self, mock_mongo_client: MagicMock):\n        \"\"\"\n        Sets up a test instance of MongoDBClient with a mocked MongoClient.\n        \"\"\"",
        "detail": "utils.Tests.test_db_connectors",
        "documentation": {}
    },
    {
        "label": "MAX_LOG_FILE_SIZE_MB",
        "kind": 5,
        "importPath": "utils.constants",
        "description": "utils.constants",
        "peekOfCode": "MAX_LOG_FILE_SIZE_MB = 10\nBYTES_PER_MB = 1024 * 1024\nMAX_LOG_FILE_SIZE = MAX_LOG_FILE_SIZE_MB * BYTES_PER_MB\nBACKUP_LOG_COUNT = 5\nDEFAULT_LOG_DIR = \"./logs\"\nDEFAULT_DATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\nDEFAULT_LOG_FORMAT = \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"",
        "detail": "utils.constants",
        "documentation": {}
    },
    {
        "label": "BYTES_PER_MB",
        "kind": 5,
        "importPath": "utils.constants",
        "description": "utils.constants",
        "peekOfCode": "BYTES_PER_MB = 1024 * 1024\nMAX_LOG_FILE_SIZE = MAX_LOG_FILE_SIZE_MB * BYTES_PER_MB\nBACKUP_LOG_COUNT = 5\nDEFAULT_LOG_DIR = \"./logs\"\nDEFAULT_DATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\nDEFAULT_LOG_FORMAT = \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"",
        "detail": "utils.constants",
        "documentation": {}
    },
    {
        "label": "MAX_LOG_FILE_SIZE",
        "kind": 5,
        "importPath": "utils.constants",
        "description": "utils.constants",
        "peekOfCode": "MAX_LOG_FILE_SIZE = MAX_LOG_FILE_SIZE_MB * BYTES_PER_MB\nBACKUP_LOG_COUNT = 5\nDEFAULT_LOG_DIR = \"./logs\"\nDEFAULT_DATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\nDEFAULT_LOG_FORMAT = \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"",
        "detail": "utils.constants",
        "documentation": {}
    },
    {
        "label": "BACKUP_LOG_COUNT",
        "kind": 5,
        "importPath": "utils.constants",
        "description": "utils.constants",
        "peekOfCode": "BACKUP_LOG_COUNT = 5\nDEFAULT_LOG_DIR = \"./logs\"\nDEFAULT_DATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\nDEFAULT_LOG_FORMAT = \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"",
        "detail": "utils.constants",
        "documentation": {}
    },
    {
        "label": "DEFAULT_LOG_DIR",
        "kind": 5,
        "importPath": "utils.constants",
        "description": "utils.constants",
        "peekOfCode": "DEFAULT_LOG_DIR = \"./logs\"\nDEFAULT_DATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\nDEFAULT_LOG_FORMAT = \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"",
        "detail": "utils.constants",
        "documentation": {}
    },
    {
        "label": "DEFAULT_DATE_FORMAT",
        "kind": 5,
        "importPath": "utils.constants",
        "description": "utils.constants",
        "peekOfCode": "DEFAULT_DATE_FORMAT = \"%Y-%m-%d %H:%M:%S\"\nDEFAULT_LOG_FORMAT = \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"",
        "detail": "utils.constants",
        "documentation": {}
    },
    {
        "label": "DEFAULT_LOG_FORMAT",
        "kind": 5,
        "importPath": "utils.constants",
        "description": "utils.constants",
        "peekOfCode": "DEFAULT_LOG_FORMAT = \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"",
        "detail": "utils.constants",
        "documentation": {}
    },
    {
        "label": "MongoDBConnectionError",
        "kind": 6,
        "importPath": "utils.db_connectors",
        "description": "utils.db_connectors",
        "peekOfCode": "class MongoDBConnectionError(Exception):\n    \"\"\"Custom exception for MongoDB connection errors.\"\"\"\n    def __init__(self, message: str):\n        \"\"\"\n        Initializes MongoDBConnectionError.\n        Args:\n            message (str): Error message.\n        \"\"\"\n        self.message = message\n        super().__init__(f\"MongoDB connection error: {message}\")",
        "detail": "utils.db_connectors",
        "documentation": {}
    },
    {
        "label": "MongoDBOperationError",
        "kind": 6,
        "importPath": "utils.db_connectors",
        "description": "utils.db_connectors",
        "peekOfCode": "class MongoDBOperationError(Exception):\n    \"\"\"Custom exception for MongoDB operation errors.\"\"\"\n    def __init__(self, operation: str, message: str):\n        \"\"\"\n        Initializes MongoDBOperationError.\n        Args:\n            operation (str): Operation being performed.\n            message (str): Error message.\n        \"\"\"\n        self.operation = operation",
        "detail": "utils.db_connectors",
        "documentation": {}
    },
    {
        "label": "MongoDBClient",
        "kind": 6,
        "importPath": "utils.db_connectors",
        "description": "utils.db_connectors",
        "peekOfCode": "class MongoDBClient:\n    \"\"\"\n    A client for interacting with a MongoDB database.\n    Provides methods for connecting to the database and performing CRUD operations.\n    \"\"\"\n    client: Optional[pymongo.MongoClient] = None\n    database: Optional[pymongo.database.Database] = None\n    def __init__(\n        self,\n        uri: str = MONGODB_URI,",
        "detail": "utils.db_connectors",
        "documentation": {}
    },
    {
        "label": "MONGODB_URI",
        "kind": 5,
        "importPath": "utils.db_connectors",
        "description": "utils.db_connectors",
        "peekOfCode": "MONGODB_URI = \"your_mongodb_uri\"\nDATABASE_NAME = \"your_database_name\"\nca = certifi.where()\nclass MongoDBConnectionError(Exception):\n    \"\"\"Custom exception for MongoDB connection errors.\"\"\"\n    def __init__(self, message: str):\n        \"\"\"\n        Initializes MongoDBConnectionError.\n        Args:\n            message (str): Error message.",
        "detail": "utils.db_connectors",
        "documentation": {}
    },
    {
        "label": "DATABASE_NAME",
        "kind": 5,
        "importPath": "utils.db_connectors",
        "description": "utils.db_connectors",
        "peekOfCode": "DATABASE_NAME = \"your_database_name\"\nca = certifi.where()\nclass MongoDBConnectionError(Exception):\n    \"\"\"Custom exception for MongoDB connection errors.\"\"\"\n    def __init__(self, message: str):\n        \"\"\"\n        Initializes MongoDBConnectionError.\n        Args:\n            message (str): Error message.\n        \"\"\"",
        "detail": "utils.db_connectors",
        "documentation": {}
    },
    {
        "label": "ca",
        "kind": 5,
        "importPath": "utils.db_connectors",
        "description": "utils.db_connectors",
        "peekOfCode": "ca = certifi.where()\nclass MongoDBConnectionError(Exception):\n    \"\"\"Custom exception for MongoDB connection errors.\"\"\"\n    def __init__(self, message: str):\n        \"\"\"\n        Initializes MongoDBConnectionError.\n        Args:\n            message (str): Error message.\n        \"\"\"\n        self.message = message",
        "detail": "utils.db_connectors",
        "documentation": {}
    },
    {
        "label": "AdvancedExceptionHandler",
        "kind": 6,
        "importPath": "utils.exceptions",
        "description": "utils.exceptions",
        "peekOfCode": "class AdvancedExceptionHandler:\n    \"\"\"\n    An advanced exception handler for Python applications.\n    Features:\n    - Centralized exception handling\n    - Logging integration\n    - Support for custom exception types\n    - Type hints and docstrings for clarity\n    \"\"\"\n    def __init__(",
        "detail": "utils.exceptions",
        "documentation": {}
    },
    {
        "label": "AdvancedMLLogger",
        "kind": 6,
        "importPath": "utils.logger",
        "description": "utils.logger",
        "peekOfCode": "class AdvancedMLLogger:\n    \"\"\"\n    A robust, advanced, and optimized logger for Machine Learning applications.\n    Features:\n    - Multiple log levels (DEBUG, INFO, WARNING, ERROR, CRITICAL).\n    - File and console output with customizable formats.\n    - Rotating file handler to manage log file size.\n    - Exception handling and traceback logging.\n    - Type hinting for improved code clarity.\n    - Optional custom formatting for specific data types.",
        "detail": "utils.logger",
        "documentation": {}
    },
    {
        "label": "parse_requirements",
        "kind": 2,
        "importPath": "utils.parse",
        "description": "utils.parse",
        "peekOfCode": "def parse_requirements(filepath: str) -> List[str]:\n    \"\"\"Parses a requirements file into a list of dependencies.\n    Args:\n        filepath: Path to the requirements file.\n    Returns:\n        A list of dependencies.\n    \"\"\"\n    with open(filepath, 'r', encoding=\"utf-8\") as file:\n        return [\n            line.strip()",
        "detail": "utils.parse",
        "documentation": {}
    },
    {
        "label": "SimpleJson",
        "kind": 5,
        "importPath": "utils.types",
        "description": "utils.types",
        "peekOfCode": "SimpleJson = Dict[str, Any]\nUnionDT = Union[str, dict, list, tuple, Exception, int, float, SimpleJson]",
        "detail": "utils.types",
        "documentation": {}
    },
    {
        "label": "UnionDT",
        "kind": 5,
        "importPath": "utils.types",
        "description": "utils.types",
        "peekOfCode": "UnionDT = Union[str, dict, list, tuple, Exception, int, float, SimpleJson]",
        "detail": "utils.types",
        "documentation": {}
    },
    {
        "label": "update_dependencies",
        "kind": 2,
        "importPath": "generate_pyproject",
        "description": "generate_pyproject",
        "peekOfCode": "def update_dependencies(\n    config: SimpleJson,\n    dependencies: list[str],\n) -> None:\n    \"\"\"Updates the dependencies in the TOML configuration.\n    Args:\n        config: The TOML configuration dictionary.\n        dependencies: List of dependencies to update.\n    \"\"\"\n    config['project']['dependencies'] = dependencies",
        "detail": "generate_pyproject",
        "documentation": {}
    },
    {
        "label": "update_optional_dependencies",
        "kind": 2,
        "importPath": "generate_pyproject",
        "description": "generate_pyproject",
        "peekOfCode": "def update_optional_dependencies(\n    config: SimpleJson,\n    dev_dependencies: list[str],\n) -> None:\n    \"\"\"Updates the optional dev dependencies in the TOML config.\n    Args:\n        config: The TOML configuration dictionary.\n        dev_dependencies: List of dev dependencies to update.\n    \"\"\"\n    config['project']['optional-dependencies']['dev'] = dev_dependencies",
        "detail": "generate_pyproject",
        "documentation": {}
    },
    {
        "label": "write_toml_file",
        "kind": 2,
        "importPath": "generate_pyproject",
        "description": "generate_pyproject",
        "peekOfCode": "def write_toml_file(filepath: str, config: SimpleJson) -> None:\n    \"\"\"Writes the TOML configuration to a file.\n    Args:\n        filepath: Path to the output file.\n        config: The TOML configuration dictionary.\n    \"\"\"\n    with open(filepath, 'w', encoding=\"utf-8\") as file:\n        toml.dump(config, file)\ndef main() -> NoReturn:\n    \"\"\"Generates pyproject.toml from template and requirements files.\"\"\"",
        "detail": "generate_pyproject",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "generate_pyproject",
        "description": "generate_pyproject",
        "peekOfCode": "def main() -> NoReturn:\n    \"\"\"Generates pyproject.toml from template and requirements files.\"\"\"\n    dependencies: list[str] = parse_requirements('requirements.txt')\n    dev_dependencies: list[str] = parse_requirements(\n        'requirements-dev.txt'\n    )\n    with open('pyproject.toml.template', 'r', encoding=\"utf-8\") as file:\n        config: SimpleJson = toml.load(file)\n    update_dependencies(config, dependencies)\n    update_optional_dependencies(config, dev_dependencies)",
        "detail": "generate_pyproject",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "hello",
        "description": "hello",
        "peekOfCode": "def main():\n    print(\"Hello from capstoneproject-1!\")\nif __name__ == \"__main__\":\n    main()",
        "detail": "hello",
        "documentation": {}
    }
]